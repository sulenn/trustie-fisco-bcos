// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package opensource

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OpenSourceABI is the input ABI used to generate the binding from.
const OpenSourceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"token_name\",\"type\":\"string\"}],\"name\":\"selectUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"selectUserAllBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"string\"},{\"name\":\"total_supply\",\"type\":\"uint256\"},{\"name\":\"cur_supply\",\"type\":\"uint256\"},{\"name\":\"username\",\"type\":\"string[]\"},{\"name\":\"balance\",\"type\":\"uint256[]\"}],\"name\":\"createRepo\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_name\",\"type\":\"string\"}],\"name\":\"selectRepoBasicInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// OpenSourceBin is the compiled bytecode used for deploying new contracts.
var OpenSourceBin = "0x60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600481526020017f7265706f000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200010191906200040a565b602060405180830381600087803b1580156200011c57600080fd5b505af115801562000131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000157919081019062000278565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620002059190620003bc565b602060405180830381600087803b1580156200022057600080fd5b505af115801562000235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200025b919081019062000278565b50620004b4565b600062000270825162000463565b905092915050565b6000602082840312156200028b57600080fd5b60006200029b8482850162000262565b91505092915050565b6000620002b18262000458565b808452620002c78160208601602086016200046d565b620002d281620004a3565b602085010191505092915050565b6000601282527f746f6b656e5f6e616d652c62616c616e636500000000000000000000000000006020830152604082019050919050565b6000600482527f75736572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f6b656e5f6e616d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f6f776e65722c746f74616c5f737570706c792c6375725f737570706c790000006020830152604082019050919050565b60006060820190508181036000830152620003d88184620002a4565b90508181036020830152620003ed8162000317565b905081810360408301526200040281620002e0565b905092915050565b60006060820190508181036000830152620004268184620002a4565b905081810360208301526200043b816200034e565b90508181036040830152620004508162000385565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156200048d57808201518184015260208101905062000470565b838111156200049d576000848401525b50505050565b6000601f19601f8301169050919050565b61341480620004c46000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063233cbaf714610067578063c50573fa146100a6578063d974b6dd146100e5578063ed2f22ae14610122575b600080fd5b34801561007357600080fd5b5061008e6004803603610089919081019061297d565b610162565b60405161009d93929190612dfc565b60405180910390f35b3480156100b257600080fd5b506100cd60048036036100c891908101906128fb565b610a73565b6040516100dc93929190612dfc565b60405180910390f35b3480156100f157600080fd5b5061010c600480360361010791908101906129e9565b6112fd565b6040516101199190612e48565b60405180910390f35b34801561012e57600080fd5b50610149600480360361014491908101906128fb565b611cee565b6040516101599493929190612f00565b60405180910390f35b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161021f9190612e7e565b602060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061027191908101906128a9565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156102d757600080fd5b505af11580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061030f919081019061282e565b96508673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103669190613109565b600060405180830381600087803b15801561038057600080fd5b505af1158015610394573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398e896040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103ef929190612ea0565b602060405180830381600087803b15801561040957600080fd5b505af115801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104419190810190612857565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104df91908101906128d2565b60405190808252806020026020018201604052801561051257816020015b60608152602001906001900390816104fd5790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105b191908101906128d2565b6040519080825280602002602001820160405280156105e457816020015b60608152602001906001900390816105cf5790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561064b57600080fd5b505af115801561065f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061068391908101906128d2565b6040519080825280602002602001820160405280156106b15781602001602082028038833980820191505090505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561071d57600080fd5b505af1158015610731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061075591908101906128d2565b821215610a5b578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107b19190612e48565b602060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108039190810190612880565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161085890613094565b600060405180830381600087803b15801561087257600080fd5b505af1158015610886573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506108af919081019061293c565b85838151811015156108bd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161091d906130e9565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610974919081019061293c565b848381518110151561098257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109e29061313e565b602060405180830381600087803b1580156109fc57600080fd5b505af1158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a349190810190612ad2565b8383815181101515610a4257fe5b90602001906020020181815250508160010191506106b9565b8484849a509a509a5050505050505050509250925092565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b309190612e7e565b602060405180830381600087803b158015610b4a57600080fd5b505af1158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8291908101906128a9565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c20919081019061282e565b96508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398d896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c79929190612ea0565b602060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ccb9190810190612857565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d6991908101906128d2565b604051908082528060200260200182016040528015610d9c57816020015b6060815260200190600190039081610d875790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e0357600080fd5b505af1158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e3b91908101906128d2565b604051908082528060200260200182016040528015610e6e57816020015b6060815260200190600190039081610e595790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed557600080fd5b505af1158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0d91908101906128d2565b604051908082528060200260200182016040528015610f3b5781602001602082028038833980820191505090505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fa757600080fd5b505af1158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fdf91908101906128d2565b8212156112e5578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161103b9190612e48565b602060405180830381600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061108d9190810190612880565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110e290613094565b600060405180830381600087803b1580156110fc57600080fd5b505af1158015611110573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611139919081019061293c565b858381518110151561114757fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111a7906130e9565b600060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111fe919081019061293c565b848381518110151561120c57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161126c9061313e565b602060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112be9190810190612ad2565b83838151811015156112cc57fe5b9060200190602002018181525050816001019150610f43565b8484849a509a509a5050505050505050509193909250565b6000806000806000806000600115156113158e61229d565b15151415611345577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc179650611cde565b898b1015611375577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc169650611cde565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f7265706f000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114209190612e7e565b602060405180830381600087803b15801561143a57600080fd5b505af115801561144e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147291908101906128a9565b95506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161151f9190612e7e565b602060405180830381600087803b15801561153957600080fd5b505af115801561154d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061157191908101906128a9565b94508573ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115d757600080fd5b505af11580156115eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061160f9190810190612880565b93508373ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116669190613109565b600060405180830381600087803b15801561168057600080fd5b505af1158015611694573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116ed9190612fa3565b600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16638a42ebe98c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117749190613066565b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16638a42ebe98b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117fb9190612ff8565b600060405180830381600087803b15801561181557600080fd5b505af1158015611829573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166331afac368e866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611884929190612ed0565b602060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118d691908101906128d2565b92506001831415156118ea57829650611cde565b8473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561194e57600080fd5b505af1158015611962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119869190810190612880565b915060009050600090505b8751811015611cda578473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119fe57600080fd5b505af1158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a369190810190612880565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a83815181101515611a6257fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611aa491906130b4565b600060405180830381600087803b158015611abe57600080fd5b505af1158015611ad2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b2b9190613109565b600060405180830381600087803b158015611b4557600080fd5b505af1158015611b59573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16638a42ebe98983815181101515611b8757fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bc9919061315e565b600060405180830381600087803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166331afac368a83815181101515611c2557fe5b90602001906020020151846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c69929190612f53565b602060405180830381600087803b158015611c8357600080fd5b505af1158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cbb91908101906128d2565b9250600183141515611ccf57829650611cde565b806001019050611991565b8296505b5050505050509695505050505050565b6060806000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f7265706f000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611da59190612e7e565b602060405180830381600087803b158015611dbf57600080fd5b505af1158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611df791908101906128a9565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e5d57600080fd5b505af1158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e95919081019061282e565b92508373ffffffffffffffffffffffffffffffffffffffff1663e8434e398a856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611eee929190612ea0565b602060405180830381600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f409190810190612857565b91508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f989190612e63565b602060405180830381600087803b158015611fb257600080fd5b505af1158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fea9190810190612880565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161203f90613026565b600060405180830381600087803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612096919081019061293c565b8173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120e990612f83565b600060405180830381600087803b15801561210357600080fd5b505af1158015612117573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612140919081019061293c565b8273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161219390613046565b602060405180830381600087803b1580156121ad57600080fd5b505af11580156121c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121e591908101906128d2565b8373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161223890612fd8565b602060405180830381600087803b15801561225257600080fd5b505af1158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061228a91908101906128d2565b9750975097509750505050509193509193565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f7265706f000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161234e9190612e7e565b602060405180830381600087803b15801561236857600080fd5b505af115801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123a091908101906128a9565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561240657600080fd5b505af115801561241a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061243e919081019061282e565b91508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3986846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612497929190612ea0565b602060405180830381600087803b1580156124b157600080fd5b505af11580156124c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124e99190810190612857565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561255157600080fd5b505af1158015612565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061258991908101906128d2565b1315612598576001935061259d565b600093505b505050919050565b600082601f83011215156125b857600080fd5b81356125cb6125c6826131b9565b61318c565b9150818183526020840193506020810190508360005b8381101561261157813586016125f78882612704565b8452602084019350602083019250506001810190506125e1565b5050505092915050565b600082601f830112151561262e57600080fd5b813561264161263c826131e1565b61318c565b9150818183526020840193506020810190508385602084028201111561266657600080fd5b60005b83811015612696578161267c8882612806565b845260208401935060208301925050600181019050612669565b5050505092915050565b60006126ac82516132f5565b905092915050565b60006126c08251613307565b905092915050565b60006126d48251613319565b905092915050565b60006126e8825161332b565b905092915050565b60006126fc825161333d565b905092915050565b600082601f830112151561271757600080fd5b813561272a61272582613209565b61318c565b9150808252602083016020830185838301111561274657600080fd5b612751838284613387565b50505092915050565b600082601f830112151561276d57600080fd5b813561278061277b82613235565b61318c565b9150808252602083016020830185838301111561279c57600080fd5b6127a7838284613387565b50505092915050565b600082601f83011215156127c357600080fd5b81516127d66127d182613235565b61318c565b915080825260208301602083018583830111156127f257600080fd5b6127fd838284613396565b50505092915050565b60006128128235613347565b905092915050565b60006128268251613347565b905092915050565b60006020828403121561284057600080fd5b600061284e848285016126a0565b91505092915050565b60006020828403121561286957600080fd5b6000612877848285016126b4565b91505092915050565b60006020828403121561289257600080fd5b60006128a0848285016126c8565b91505092915050565b6000602082840312156128bb57600080fd5b60006128c9848285016126dc565b91505092915050565b6000602082840312156128e457600080fd5b60006128f2848285016126f0565b91505092915050565b60006020828403121561290d57600080fd5b600082013567ffffffffffffffff81111561292757600080fd5b6129338482850161275a565b91505092915050565b60006020828403121561294e57600080fd5b600082015167ffffffffffffffff81111561296857600080fd5b612974848285016127b0565b91505092915050565b6000806040838503121561299057600080fd5b600083013567ffffffffffffffff8111156129aa57600080fd5b6129b68582860161275a565b925050602083013567ffffffffffffffff8111156129d357600080fd5b6129df8582860161275a565b9150509250929050565b60008060008060008060c08789031215612a0257600080fd5b600087013567ffffffffffffffff811115612a1c57600080fd5b612a2889828a0161275a565b965050602087013567ffffffffffffffff811115612a4557600080fd5b612a5189828a0161275a565b9550506040612a6289828a01612806565b9450506060612a7389828a01612806565b935050608087013567ffffffffffffffff811115612a9057600080fd5b612a9c89828a016125a5565b92505060a087013567ffffffffffffffff811115612ab957600080fd5b612ac589828a0161261b565b9150509295509295509295565b600060208284031215612ae457600080fd5b6000612af28482850161281a565b91505092915050565b6000612b068261327b565b80845260208401935083602082028501612b1f85613261565b60005b84811015612b58578383038852612b3a838351612c36565b9250612b45826132a7565b9150602088019750600181019050612b22565b508196508694505050505092915050565b6000612b7482613286565b808452602084019350612b868361326e565b60005b82811015612bb857612b9c868351612ded565b612ba5826132b4565b9150602086019550600181019050612b89565b50849250505092915050565b612bcd81613351565b82525050565b612bdc81613363565b82525050565b612beb816132e1565b82525050565b612bfa81613375565b82525050565b6000612c0b8261329c565b808452612c1f816020860160208601613396565b612c28816133c9565b602085010191505092915050565b6000612c4182613291565b808452612c55816020860160208601613396565b612c5e816133c9565b602085010191505092915050565b6000600582527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6375725f737570706c79000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f6b656e5f4e616d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f746f74616c5f737570706c7900000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f75736572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f6b656e5f6e616d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62616c616e6365000000000000000000000000000000000000000000000000006020830152604082019050919050565b612df6816132eb565b82525050565b60006060820190508181036000830152612e168186612afb565b90508181036020830152612e2a8185612afb565b90508181036040830152612e3e8184612b69565b9050949350505050565b6000602082019050612e5d6000830184612be2565b92915050565b6000602082019050612e786000830184612bf1565b92915050565b60006020820190508181036000830152612e988184612c36565b905092915050565b60006040820190508181036000830152612eba8185612c00565b9050612ec96020830184612bc4565b9392505050565b60006040820190508181036000830152612eea8185612c00565b9050612ef96020830184612bd3565b9392505050565b60006080820190508181036000830152612f1a8187612c00565b90508181036020830152612f2e8186612c00565b9050612f3d6040830185612be2565b612f4a6060830184612be2565b95945050505050565b60006040820190508181036000830152612f6d8185612c36565b9050612f7c6020830184612bd3565b9392505050565b60006020820190508181036000830152612f9c81612c6c565b9050919050565b60006040820190508181036000830152612fbc81612c6c565b90508181036020830152612fd08184612c00565b905092915050565b60006020820190508181036000830152612ff181612ca3565b9050919050565b6000604082019050818103600083015261301181612ca3565b90506130206020830184612ded565b92915050565b6000602082019050818103600083015261303f81612cda565b9050919050565b6000602082019050818103600083015261305f81612d11565b9050919050565b6000604082019050818103600083015261307f81612d11565b905061308e6020830184612ded565b92915050565b600060208201905081810360008301526130ad81612d48565b9050919050565b600060408201905081810360008301526130cd81612d48565b905081810360208301526130e18184612c36565b905092915050565b6000602082019050818103600083015261310281612d7f565b9050919050565b6000604082019050818103600083015261312281612d7f565b905081810360208301526131368184612c00565b905092915050565b6000602082019050818103600083015261315781612db6565b9050919050565b6000604082019050818103600083015261317781612db6565b90506131866020830184612ded565b92915050565b6000604051905081810181811067ffffffffffffffff821117156131af57600080fd5b8060405250919050565b600067ffffffffffffffff8211156131d057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156131f857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561322057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561324c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000613300826132c1565b9050919050565b6000613312826132c1565b9050919050565b6000613324826132c1565b9050919050565b6000613336826132c1565b9050919050565b6000819050919050565b6000819050919050565b600061335c826132c1565b9050919050565b600061336e826132c1565b9050919050565b6000613380826132e1565b9050919050565b82818337600083830152505050565b60005b838110156133b4578082015181840152602081019050613399565b838111156133c3576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203b51671a460d50ca3b7356bebd2488d93b8c45a632dd160dfeee0e85c08079206c6578706572696d656e74616cf50037"

// DeployOpenSource deploys a new contract, binding an instance of OpenSource to it.
func DeployOpenSource(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OpenSource, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenSourceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OpenSourceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OpenSource{OpenSourceCaller: OpenSourceCaller{contract: contract}, OpenSourceTransactor: OpenSourceTransactor{contract: contract}, OpenSourceFilterer: OpenSourceFilterer{contract: contract}}, nil
}

func AsyncDeployOpenSource(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenSourceABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(OpenSourceBin), backend)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// OpenSource is an auto generated Go binding around a Solidity contract.
type OpenSource struct {
	OpenSourceCaller     // Read-only binding to the contract
	OpenSourceTransactor // Write-only binding to the contract
	OpenSourceFilterer   // Log filterer for contract events
}

// OpenSourceCaller is an auto generated read-only Go binding around a Solidity contract.
type OpenSourceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenSourceTransactor is an auto generated write-only Go binding around a Solidity contract.
type OpenSourceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenSourceFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type OpenSourceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenSourceSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type OpenSourceSession struct {
	Contract     *OpenSource       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OpenSourceCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type OpenSourceCallerSession struct {
	Contract *OpenSourceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// OpenSourceTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type OpenSourceTransactorSession struct {
	Contract     *OpenSourceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// OpenSourceRaw is an auto generated low-level Go binding around a Solidity contract.
type OpenSourceRaw struct {
	Contract *OpenSource // Generic contract binding to access the raw methods on
}

// OpenSourceCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type OpenSourceCallerRaw struct {
	Contract *OpenSourceCaller // Generic read-only contract binding to access the raw methods on
}

// OpenSourceTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type OpenSourceTransactorRaw struct {
	Contract *OpenSourceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOpenSource creates a new instance of OpenSource, bound to a specific deployed contract.
func NewOpenSource(address common.Address, backend bind.ContractBackend) (*OpenSource, error) {
	contract, err := bindOpenSource(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OpenSource{OpenSourceCaller: OpenSourceCaller{contract: contract}, OpenSourceTransactor: OpenSourceTransactor{contract: contract}, OpenSourceFilterer: OpenSourceFilterer{contract: contract}}, nil
}

// NewOpenSourceCaller creates a new read-only instance of OpenSource, bound to a specific deployed contract.
func NewOpenSourceCaller(address common.Address, caller bind.ContractCaller) (*OpenSourceCaller, error) {
	contract, err := bindOpenSource(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OpenSourceCaller{contract: contract}, nil
}

// NewOpenSourceTransactor creates a new write-only instance of OpenSource, bound to a specific deployed contract.
func NewOpenSourceTransactor(address common.Address, transactor bind.ContractTransactor) (*OpenSourceTransactor, error) {
	contract, err := bindOpenSource(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OpenSourceTransactor{contract: contract}, nil
}

// NewOpenSourceFilterer creates a new log filterer instance of OpenSource, bound to a specific deployed contract.
func NewOpenSourceFilterer(address common.Address, filterer bind.ContractFilterer) (*OpenSourceFilterer, error) {
	contract, err := bindOpenSource(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OpenSourceFilterer{contract: contract}, nil
}

// bindOpenSource binds a generic wrapper to an already deployed contract.
func bindOpenSource(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenSourceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenSource *OpenSourceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenSource.Contract.OpenSourceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenSource *OpenSourceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.OpenSourceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenSource *OpenSourceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.OpenSourceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenSource *OpenSourceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenSource.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenSource *OpenSourceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenSource *OpenSourceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.contract.Transact(opts, method, params...)
}

// SelectRepoBasicInfo is a free data retrieval call binding the contract method 0xed2f22ae.
//
// Solidity: function selectRepoBasicInfo(string token_name) constant returns(string, string, int256, int256)
func (_OpenSource *OpenSourceCaller) SelectRepoBasicInfo(opts *bind.CallOpts, token_name string) (string, string, *big.Int, *big.Int, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _OpenSource.contract.Call(opts, out, "selectRepoBasicInfo", token_name)
	return *ret0, *ret1, *ret2, *ret3, err
}

// SelectRepoBasicInfo is a free data retrieval call binding the contract method 0xed2f22ae.
//
// Solidity: function selectRepoBasicInfo(string token_name) constant returns(string, string, int256, int256)
func (_OpenSource *OpenSourceSession) SelectRepoBasicInfo(token_name string) (string, string, *big.Int, *big.Int, error) {
	return _OpenSource.Contract.SelectRepoBasicInfo(&_OpenSource.CallOpts, token_name)
}

// SelectRepoBasicInfo is a free data retrieval call binding the contract method 0xed2f22ae.
//
// Solidity: function selectRepoBasicInfo(string token_name) constant returns(string, string, int256, int256)
func (_OpenSource *OpenSourceCallerSession) SelectRepoBasicInfo(token_name string) (string, string, *big.Int, *big.Int, error) {
	return _OpenSource.Contract.SelectRepoBasicInfo(&_OpenSource.CallOpts, token_name)
}

// SelectUserAllBalance is a free data retrieval call binding the contract method 0xc50573fa.
//
// Solidity: function selectUserAllBalance(string username) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceCaller) SelectUserAllBalance(opts *bind.CallOpts, username string) ([]string, []string, []*big.Int, error) {
	var (
		ret0 = new([]string)
		ret1 = new([]string)
		ret2 = new([]*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _OpenSource.contract.Call(opts, out, "selectUserAllBalance", username)
	return *ret0, *ret1, *ret2, err
}

// SelectUserAllBalance is a free data retrieval call binding the contract method 0xc50573fa.
//
// Solidity: function selectUserAllBalance(string username) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceSession) SelectUserAllBalance(username string) ([]string, []string, []*big.Int, error) {
	return _OpenSource.Contract.SelectUserAllBalance(&_OpenSource.CallOpts, username)
}

// SelectUserAllBalance is a free data retrieval call binding the contract method 0xc50573fa.
//
// Solidity: function selectUserAllBalance(string username) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceCallerSession) SelectUserAllBalance(username string) ([]string, []string, []*big.Int, error) {
	return _OpenSource.Contract.SelectUserAllBalance(&_OpenSource.CallOpts, username)
}

// SelectUserBalance is a free data retrieval call binding the contract method 0x233cbaf7.
//
// Solidity: function selectUserBalance(string username, string token_name) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceCaller) SelectUserBalance(opts *bind.CallOpts, username string, token_name string) ([]string, []string, []*big.Int, error) {
	var (
		ret0 = new([]string)
		ret1 = new([]string)
		ret2 = new([]*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _OpenSource.contract.Call(opts, out, "selectUserBalance", username, token_name)
	return *ret0, *ret1, *ret2, err
}

// SelectUserBalance is a free data retrieval call binding the contract method 0x233cbaf7.
//
// Solidity: function selectUserBalance(string username, string token_name) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceSession) SelectUserBalance(username string, token_name string) ([]string, []string, []*big.Int, error) {
	return _OpenSource.Contract.SelectUserBalance(&_OpenSource.CallOpts, username, token_name)
}

// SelectUserBalance is a free data retrieval call binding the contract method 0x233cbaf7.
//
// Solidity: function selectUserBalance(string username, string token_name) constant returns(string[], string[], uint256[])
func (_OpenSource *OpenSourceCallerSession) SelectUserBalance(username string, token_name string) ([]string, []string, []*big.Int, error) {
	return _OpenSource.Contract.SelectUserBalance(&_OpenSource.CallOpts, username, token_name)
}

// CreateRepo is a paid mutator transaction binding the contract method 0xd974b6dd.
//
// Solidity: function createRepo(string token_name, string owner, uint256 total_supply, uint256 cur_supply, string[] username, uint256[] balance) returns(int256)
func (_OpenSource *OpenSourceTransactor) CreateRepo(opts *bind.TransactOpts, token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.contract.Transact(opts, "createRepo", token_name, owner, total_supply, cur_supply, username, balance)
}

func (_OpenSource *OpenSourceTransactor) AsyncCreateRepo(handler func(*types.Receipt, error), opts *bind.TransactOpts, token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, error) {
	return _OpenSource.contract.AsyncTransact(opts, handler, "createRepo", token_name, owner, total_supply, cur_supply, username, balance)
}

// CreateRepo is a paid mutator transaction binding the contract method 0xd974b6dd.
//
// Solidity: function createRepo(string token_name, string owner, uint256 total_supply, uint256 cur_supply, string[] username, uint256[] balance) returns(int256)
func (_OpenSource *OpenSourceSession) CreateRepo(token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.CreateRepo(&_OpenSource.TransactOpts, token_name, owner, total_supply, cur_supply, username, balance)
}

func (_OpenSource *OpenSourceSession) AsyncCreateRepo(handler func(*types.Receipt, error), token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, error) {
	return _OpenSource.Contract.AsyncCreateRepo(handler, &_OpenSource.TransactOpts, token_name, owner, total_supply, cur_supply, username, balance)
}

// CreateRepo is a paid mutator transaction binding the contract method 0xd974b6dd.
//
// Solidity: function createRepo(string token_name, string owner, uint256 total_supply, uint256 cur_supply, string[] username, uint256[] balance) returns(int256)
func (_OpenSource *OpenSourceTransactorSession) CreateRepo(token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, *types.Receipt, error) {
	return _OpenSource.Contract.CreateRepo(&_OpenSource.TransactOpts, token_name, owner, total_supply, cur_supply, username, balance)
}

func (_OpenSource *OpenSourceTransactorSession) AsyncCreateRepo(handler func(*types.Receipt, error), token_name string, owner string, total_supply *big.Int, cur_supply *big.Int, username []string, balance []*big.Int) (*types.Transaction, error) {
	return _OpenSource.Contract.AsyncCreateRepo(handler, &_OpenSource.TransactOpts, token_name, owner, total_supply, cur_supply, username, balance)
}
